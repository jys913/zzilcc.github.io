<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>vue指令</title>
      <link href="/2018/07/16/vue%E6%8C%87%E4%BB%A4/"/>
      <url>/2018/07/16/vue%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h1><p>这章介绍的是vue的一些指令，是以“v-”开头的指令，它的值预估是单个<br>JavaScript表达式(v-for例外)。指令的作用是在表达式的值改变的时候，<br>将产生的影响，响应的作用在DOM上。<a id="more"></a></p><h2 id="v-if、v-else和v-else-if"><a href="#v-if、v-else和v-else-if" class="headerlink" title="v-if、v-else和v-else-if"></a>v-if、v-else和v-else-if</h2><p>使用场景：我们需要进行条件判断来决定这个元素是否显示的时候，就需要用到这些指令。</p><p>有v-else指令的元素必须跟在带有v-if或者v-else-if的元素后面，否则将不会被识别</p><p>使用方法：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;div v-if=&quot;param&quot;&gt;        登陆成功       &lt;!--param的值为true的时候--&gt;    &lt;/div&gt;    &lt;div v-else&gt;        请登录    &lt;!--param的值为false的时候--&gt;    &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        param: true    }});</code></pre><p>v-else-if 是在2.1.0版本新增的一个指令。学过c,c++,java语言的都应该可以理解，也就是否则如果，可以连续使用，该指令也是只能跟在v-if后面。</p><p>使用方法：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;div v-if=&quot;param===0&quot;&gt;         &lt;!--param的值为0的时候--&gt;    &lt;/div&gt;    &lt;div v-else-if=&quot;param===1&quot;&gt;         &lt;!--param的值为1的时候--&gt;    &lt;/div&gt;    &lt;div v-else-if=&quot;param===2&quot;&gt;         &lt;!--param的值为2的时候--&gt;    &lt;/div&gt;    &lt;div v-else&gt;         &lt;!--param的值是非1，非2，非0的时候--&gt;    &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        param: 0    }});</code></pre><h2 id="v-show和v-once"><a href="#v-show和v-once" class="headerlink" title="v-show和v-once"></a>v-show和v-once</h2><p>v-show指令也是用于条件展示的，用法和v-if一样，只不过没有v-else指令在后面。</p><p>不同的是带有v-show的元素是一开始就会被渲染并保留在DOM中，它是决定的是css属性display来显示或者不显示元素。而v-if是条件渲染，为真才渲染，若为假是不会渲染出相应的元素的，也就是为假的时候DOM上是找不到该元素的。</p><p>v-once顾名思义，一次性的插值。</p><p>此时渲染结果为 Hello!,若是后期我们把message的值改为Hello,world！,元素p里的内容还是Hello!，不会随着data里的message的改变而改变</p><h2 id="v-text和v-html"><a href="#v-text和v-html" class="headerlink" title="v-text和v-html"></a>v-text和v-html</h2><p>v-text的作用等价于两个双括号,用两个双括号不好的地方是当网速很慢或者js报错的时候，会直接显示两个双括号，但是使用v-text就不会，所以在实际开发的时候，建议使用v-text。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;{{message}}&lt;/p&gt; == &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello!&quot;    }});</code></pre><p>v-html: 会将元素当成html标签解析然后输出。</p><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;p v-text=&quot;message&quot;&gt;&lt;/p&gt;    &lt;p v-html=&quot;message&quot;&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;    }});</code></pre><p>输出结果为：</p><p><img src="v-html.png" alt=""></p><p>注意： 在站点上动态的渲染任意的HTML可能会很危险，因为它很容易导致XSS攻击，所以最好慎用。</p><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p>v-bind一般用来绑定元素属性，属性值可以是字符串，对象或数组。可以用来绑定class、style或者是图片，链接的地址属性src、href等。v-bind可以简写成“:”。</p><pre><code>&lt;style&gt;.fd-head {    color: red;}.fd-nav {    background-color: yellow;}.active {    font-size: 20px;}.text-danger {    color: red;    border: 1px solid &apos;#000&apos;;}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;    &lt;h1&gt;1. 绑定到src和href属性上&lt;/h1&gt;        &lt;img v-bind:src=&quot;imgSrc&quot;&gt;        &lt;a :href=&quot;url&quot;&gt;github传送门&lt;/a&gt;    &lt;h1&gt;2. 绑定到样式&lt;/h1&gt;        &lt;div :class=&quot;{&apos;fd-head&apos;:isOk, &apos;active&apos;:isActive}&quot;&gt;            &lt;p&gt;(1)一般绑定方法&lt;/p&gt;            字体为红色        &lt;/div&gt;        &lt;div class=&quot;fd-nav&quot; :class=&quot;{&apos;fd-head&apos;:isOk, &apos;active&apos;:isActive}&quot;&gt;            &lt;p&gt;(2)v-bind:class也可以与普通的class属性共存&lt;/p&gt;            字体为红色且背景颜色为黄色        &lt;/div&gt;        &lt;div :class=&quot;isTrue?fd-head:active&quot;&gt;            &lt;p&gt;用三元运算符来选择样式,字体大小为20px&lt;/p&gt;        &lt;/div&gt;        &lt;div :class=&quot;[activeClass,errorClass]&quot;&gt;            绑定到数组        &lt;/div&gt;    &lt;h1&gt;3. 绑定内联样式style&lt;/h1&gt;        &lt;h2&gt;对象语法&lt;/h2&gt;        &lt;div :style=&quot;{color:activeColor,fontSize:fontSize + &apos;px&apos;,&apos;background-color&apos;:bgcolor}&quot;&gt;            (1)我们给:style赋值的是一个对象，该对象语法看上去有点像css，但其实是一个JavaScript对象，css的属性名可以用驼峰式，这样就需要用括号括起来，或者用短横线分隔，这样就需要用括号括起来。        &lt;/div&gt;        &lt;div :style=&quot;styleObj1&quot;&gt;            &lt;p&gt;(2)或者我们直接绑定到一个样式对象，这样比较简单明了。        &lt;/div&gt;        &lt;h2&gt;数组语法&lt;/h2&gt;        &lt;div :style=&quot;[styleObj1,styleObj2,styleObj3]&quot;&gt;            &lt;p&gt;数组语法可以将多个样式对象应用到同一个元素上。        &lt;/div&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        imgSrc: &quot;http://2b.zol-img.com.cn/product/131/741/ceUvYp3mRk5w.jpg&quot;,        url: &quot;https://github.com/zzilcc&quot;,        isOk: true,        isActive: false,        isTrue: false,        activeClass: &apos;active&apos;,        errorClass: &apos;text-danger&apos;,        activeColor: &apos;red&apos;,        &apos;fd-head&apos;: &apos;fd-head&apos;,        active: &apos;active&apos;,        fontSize: 30,        bgcolor: &apos;blue&apos;,        styleObj1: {            color: &apos;red&apos;,            fontSize: &apos;13px&apos;        },        styleObj2: {            position: &apos;relative&apos;        },        styleObj3: {            backgroundColor: &apos;blue&apos;        }    }})</code></pre><p>结果为：<br><img src="v-bind1.png" alt=""></p><p><img src="v-bind2.png" alt=""></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model指令主要用来在表单<code>&lt;input&gt;</code>及<code>&lt;textarea&gt;</code>元素上进行双向数据绑定。v-model会忽略所有表单元素的value,checked,selected特性的初始值，而总是将Vue实例的数据当做数据来源。</p><h3 id="文本绑定"><a href="#文本绑定" class="headerlink" title="文本绑定"></a>文本绑定</h3><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input v-model=&quot;message&quot; placeholder=&quot;请输入&quot;&gt;    &lt;p&gt; Message is : &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;&quot;    }})</code></pre><p><img src="v-model1.png" alt=""></p>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue基础</title>
      <link href="/2018/07/16/vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/07/16/vue%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="Vue-js是什么"><a href="#Vue-js是什么" class="headerlink" title="Vue.js是什么"></a>Vue.js是什么</h2><p>Vue是一个前端框架，官方的解释是一套用于构建用户界面的渐进式框架。相对于React,AngularJS框架来说是比较轻量级的，然后比较容易上手，所以一开始选择学哪个框架的时候就选择了Vue,正好入职的第一家公司也是使用这个框架。<br><a id="more"></a></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Vue有两个版本，一个开发版本，包含完整的警告和调试模式；一个是生产版本，删除了警告，进行了压缩。</p><p>GitHub地址传送门：<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">github</a></p><h2 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h2><p>我们一般通过Vue函数创建一个新的Vue实例。</p><pre><code>var vue = new Vue({    //选项});</code></pre><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue是声明式渲染，这是Vue的核心，我看过比较好的解释就是“我们只需要告诉程序我们想要什么效果，其他交给程序去做”。</p><p>官网的例子就很好理解：</p><pre><code>&lt;div id=&quot;app&quot;&gt;    {{message}} //Hi&lt;/div&gt;var vue = new Vue ({    el: &quot;#app&quot;,    data: {        message: &apos;Hi!&apos;    }}) </code></pre><p>  通过这样我们已经把数据渲染进DOM，而且是响应式的。主要data里的message值发生变化，在页面上也会跟着变化。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><p>当创建一个实例后，我们可以传入一个选项对象，下面列出一些常用选项：</p><ul><li>el</li><li>data</li><li>methods</li><li>computed</li></ul><h3 id="el"><a href="#el" class="headerlink" title="el"></a>el</h3><p> 选择挂载目标，可以是css选择器，也可以是html元素，在实例挂载后，元素可以通过vue.$el访问。</p><p> 如果是在实例化时存在这个选项，实例将立即进入编译过程，否则需要显式调用vue.$mount()手动开始编译。</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p> Vue实例的数据对象。Vue是响应式的数据变化的，因为Vue会递归的将data的属性转换为getter/setter。data对象必须是纯粹的对象，也就是含有零个或多个的键值对。</p><p> 实例创建后，可以通过vue.$data访问，并且Vue实例，也就是vue实际上也代理了data对象上的不是以“_”或者“$”开头的属性。也就是vue.$data.a等价于 vue.a.</p><pre><code>&lt;div id=&quot;app&quot;&gt;    {{message}}  //Hello,world&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello world!&quot;    }});vue.$data.message === vue.message //true</code></pre><h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><p> 用来定义一些方法，用这些方法是实现你想要的一些功能，比如点击事件，或者发送ajax请求等等。这些方法可以通过实例来访问，或者在指令表达式中使用，方法中的this会自动绑定为Vue实例。</p><pre><code>&lt;div id=&quot;app&quot;&gt;     {{message}}  //Hello     &lt;button v-on:click=&quot;show&quot;&gt;展示完整信息&lt;/button&gt;//点击按钮后会出现Hello,world!&lt;/div&gt;var vue = new Vue({    el: &quot;#app&quot;,    data: {        message: &quot;Hello&quot;    },    methods: {        show: function() {            return message = + &quot;,world!&quot;        }    }})</code></pre><p> 在这个例子我们使用v-on命令，用来监听事件，这个命令下节会解释。我们在button标签里绑定了点击事件，所以一点击的时候，就会触发了show函数，该函数就会执行，所以message的值为“Hello,world！”。</p><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p> 计算属性，它是基于依赖进行缓存的，只有相关的依赖的值发生了改变，才会重新执行函数，否则只会返回之前的结果。</p><p> 类型：{[key: string]: Function|{get: Function,set: Function}}</p><pre><code>var vue = new Vue({    el: &quot;#app&quot;,    data: {        a: 1    },    computed: {        add: function() {             return this.a + 1        }    }})</code></pre><p> or</p><pre><code>var vue = new Vue({    el: &quot;#app&quot;,    data: {        a: 1    },    computed: {        add: {            get: function() {                return this.a + 1            },            set: function(data) {                this.a = data -1            }        }    }})</code></pre>]]></content>
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
